package requirement;

import helper.TraceabilityManagerHumanReadable;

/**
 * Create a new proxy requirement which does not actually exist but serves as the target of a link (SpecRelation)
 * 
 * @author Moritz Dorka <moritz.dorka@mailbox.tu-dresden.de>
 */
public class RequirementProxy implements TraceableArtifact {
    final TraceabilityManagerHumanReadable hrManager;
    
    /**
     * Ordinary constructor
     * 
     * @param tracestring raw tracestring of this proxy
     */
    public RequirementProxy(final String tracestring) {
	if (tracestring == null) throw new IllegalArgumentException("tracestring cannot be null.");
	this.hrManager = new TraceabilityManagerHumanReadable();
	this.hrManager.addList(tracestring);
    }
    
    @Override
    public TraceabilityManagerHumanReadable getHumanReadableManager() {
	return this.hrManager;
    }

    @Override
    public String getContent() {
	return "";
    }
    
    @Override
    public boolean getImplementationStatus() {
	return false;
    }
    
    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
	// autogenerated by Eclipse
	final int prime = 31;
	int result = 1;
	result = prime * result
		+ ((this.hrManager == null) ? 0 : this.hrManager.hashCode());
	return result;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object obj) {
	// autogenerated by Eclipse
	if (this == obj) {
	    return true;
	}
	if (obj == null) {
	    return false;
	}
	if (getClass() != obj.getClass()) {
	    return false;
	}
	final RequirementProxy other = (RequirementProxy) obj;
	if (this.hrManager == null) {
	    if (other.hrManager != null) {
		return false;
	    }
	} else if (!this.hrManager.equals(other.hrManager)) {
	    return false;
	}
	return true;
    }
}
